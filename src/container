#!/bin/bash
# SPDX-License-Identifier: Apache-2.0
# This file is part of termux-container.
#
# Copyright (c) 2021-2023 Moe-hacker
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# 定义prefix路径
export PREFIX=/usr

#检测文件夹
test -d $PREFIX/etc || sudo mkdir -p -v $PREFIX/etc
test -d $PREFIX/etc/container || sudo mkdir -p -v $PREFIX/etc/container
test -d $PREFIX/var || sudo mkdir -p -v $PREFIX/var
test -d $PREFIX/tmp || sudo mkdir -p -v $PREFIX/tmp
test -d $PREFIX/containers || sudo mkdir -p -v $PREFIX/containers

sudo chmod 777 -R -v $PREFIX/var $PREFIX/tmp $PREFIX/etc

# Version info.
export MOE_CONTAINER_MANAGER_VERSION="0.0.1-beta"
export MOE_CONTAINER_MANAGER_LICENSE="Apache-2.0"
# Will be automatically set by Makefile.
export MOE_CONTAINER_MANAGER_COMMIT_ID=""
# Output main color.
RGB_COLOR="254;228;208"
export COLOR="\033[1;38;2;${RGB_COLOR}m"
# A very cute catgirl nya~~~
export CAT1="\n${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ Ｖ ﾉ|ﾉ
      ⠁⠁
"
export CAT2="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏  ^ ﾉ|ﾉ
      ⠁⠁
"
export CAT3="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ぁ ﾉ|ﾉ
      ⠁⠁
"
export CAT4="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ の ﾉ|ﾉ
      ⠁⠁
"
export CAT5="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ヮ ﾉ|ﾉ
      ⠁⠁
"
export CAT6="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ++ ﾉ|ﾉ
      ⠁⠁
"
export CAT7="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ xx ﾉ|ﾉ
      ⠁⠁
"
export CAT8="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ひ ﾉ|ﾉ
      ⠁⠁
"

# Show error message and exit.
function error() {
  # Usage:
  # error "Error message"
  echo -e "\033[31m$@\033[0m" >&2
  printf "${COLOR}${CAT2}\033[0m" >&2
  echo -e "${COLOR}If you think something is wrong, please report at:\n\033[4mhttps://github.com/Moe-hacker/termux-container/discussions\033[0m" >&2
  exit 1
}
# Load functions && Load configs && check the environment.
function _init() {
  # Usage:
  # _init
  for i in $(ls /usr/share/termux-container/functions); do
    source /usr/share/termux-container/functions/$i
  done
  if [[ ! -e /usr/etc/container/global.conf ]]; then
    error "Could not find global config file!"
  fi
  source /usr/etc/container/global.conf
  for i in capsh unshare chroot proot wget curl; do
    if ! command -v $i 2>&1 >/dev/null; then
      error "Missing dependencies: $i!"
    fi
  done
  if ! command -v ruri 2>&1 >/dev/null; then
    error "ruri not found, package might be broken!"
  fi
  if ! command -v container-console 2>&1 >/dev/null; then
    error "container-console not found, package might be broken!"
  fi
  kernelVersion="$(uname -r)"
  kernelMajor="${kernelVersion%%.*}"
  if ((kernelMajor < 4)); then
    echo -e "\033[33mWarning: termux-container has not been tested under linux 3.x or lower.\033[0m" >&2
  fi
}

# Maybe it seems to be stupid.
# But it provides an interface for executing built-in functions easily.
function exec_function() {
  $@
}
# Parse command from container-console.
function container_console_main() {
  case $1 in
  "help") console_help ;;
  "search") search_images $2 $3 ;;
  "login") run_container $2 ;;
  "pull") pull_rootfs $2 $3 $4 ;;
  "import") import_rootfs $2 ;;
  "export") export_container $2 ;;
  "new") create_new_container ;;
  "ls") container_list ;;
  "exit") echo -e "\nExit.\033[0m" && exit ;;
  "rmi") remove_image $2 $3 $4 ;;
  "rm") remove_container $2 ;;
  "cp") container_cp $2 $3 ;;
  "info") show_info ;;
  "") return ;;
  *)
    RANDOM_NUM=$RANDOM
    RANDOM_NUM=$((RANDOM_NUM % 6))
    case $RANDOM_NUM in
    "1")
      x=${CAT2}
      ;;
    "2")
      x=${CAT3}
      ;;
    "3")
      x=${CAT4}
      ;;
    "4")
      x=${CAT5}
      ;;
    "5")
      x=${CAT6}
      ;;
    "0")
      x=${CAT7}
      ;;
    esac
    printf "$x\n"
    echo -e "\033[31m$(po_getmsg "Error: Unknow command \`$@\`,type \`help\` to show helps.")\033[0m${COLOR}"
    ;;
  esac
}
function container_console() {
  # It has been rewritten with Go.
  container-console
  x="${CAT8}\nBye, nya~"
  printf "$x\n"
}
# I think a large script should includes a main function...
function main() {
  case $1 in
  "-h") script_help ;;
  "-E") easy_mode ;;
  "-e") exec_function ${@:2} ;;
  "cp") container_cp $2 $3 ;;
  "") container_console ;;
  *) container_console_main ${@:1} ;;
  esac
}
_init
main "$@"
#  ██╗ ██╗  ███████╗   ████╗   ███████╗
# ████████╗ ██╔════╝ ██╔═══██╗ ██╔════╝
# ╚██╔═██╔╝ █████╗   ██║   ██║ █████╗
# ████████╗ ██╔══╝   ██║   ██║ ██╔══╝
# ╚██╔═██╔╝ ███████╗ ╚██████╔╝ ██║
#  ╚═╝ ╚═╝  ╚══════╝  ╚═════╝  ╚═╝
